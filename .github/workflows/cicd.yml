name: CI/CD Pipeline

on:
  push:
    branches: [dev, staging, main]
  pull_request:
    branches: [dev, staging, main]

jobs:
  # CI: 代码检查和测试
  ci:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install black ruff pytest

      - name: Run linting - Code quality
        run: ruff check app/ ml/

      - name: Run linting - Code formatting
        run: black --check app/ ml/

      - name: Run tests
        run: pytest -v

  # CD: 构建和部署
  cd:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set_env
        run: |
          if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "SECRET_NAME=STAGING_ENV" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "SECRET_NAME=PROD_ENV" >> $GITHUB_OUTPUT
          fi

      - name: Create .env file
        run: echo "${{ secrets[steps.set_env.outputs.SECRET_NAME] }}" > .env

      - name: Build Docker image
        run: |
          docker build -t my-app:${{ steps.set_env.outputs.ENVIRONMENT }} .
          echo "✅ Docker image built: my-app:${{ steps.set_env.outputs.ENVIRONMENT }}"

      - name: Show build info
        run: |
          echo "🎉 Deployment to ${{ steps.set_env.outputs.ENVIRONMENT }} completed!"
          echo "📦 Image: my-app:${{ steps.set_env.outputs.ENVIRONMENT }}"
